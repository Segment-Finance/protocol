pragma solidity ^0.8.20;

import "./SeTokens/VBNB.sol";

/**
 * @title Segment's Maximillion Contract
 * @author Segment
 */
contract Maximillion {
    /**
     * @notice The default seBnb market to repay in
     */
    VBNB public seBnb;

    /**
     * @notice Construct a Maximillion to repay max in a VBNB market
     */
    constructor(VBNB seBnb_) public {
        seBnb = seBnb_;
    }

    /**
     * @notice msg.sender sends BNB to repay an account's borrow in the seBnb market
     * @dev The provided BNB is applied towards the borrow balance, any excess is refunded
     * @param borrower The address of the borrower account to repay on behalf of
     */
    function repayBehalf(address borrower) public payable {
        repayBehalfExplicit(borrower, seBnb);
    }

    /**
     * @notice msg.sender sends BNB to repay an account's borrow in a seBnb market
     * @dev The provided BNB is applied towards the borrow balance, any excess is refunded
     * @param borrower The address of the borrower account to repay on behalf of
     * @param seBnb_ The address of the seBnb contract to repay in
     */
    function repayBehalfExplicit(address borrower, VBNB seBnb_) public payable {
        uint received = msg.value;
        uint borrows = seBnb_.borrowBalanceCurrent(borrower);
        if (received > borrows) {
            seBnb_.repayBorrowBehalf.value(borrows)(borrower);
            msg.sender.transfer(received - borrows);
        } else {
            seBnb_.repayBorrowBehalf.value(received)(borrower);
        }
    }
}
